# -*- mode: ruby -*-
# vi: set ft=ruby :

# Solución al bug con el plugin de vagrant vagrant-aws
class Hash
  def slice(*keep_keys)
    h = {}
    keep_keys.each { |key| h[key] = fetch(key) if has_key?(key) }
    h
  end unless Hash.method_defined?(:slice)
  def except(*less_keys)
    slice(*keys - less_keys)
  end unless Hash.method_defined?(:except)
end

# Importamos el plugin del proveedor AWS
require 'vagrant-aws'

# Crear y configurar una instancia de AWS
Vagrant.configure("2") do |config|
    config.vm.box = "aws-dummy"
    config.ssh.keys_only = false
    
    config.vm.provider :aws do |aws, override|      
       
        # Especificar el Keypair a utilizar
        aws.keypair_name = "pgitic-key"
        # Insertar claves directamente en Vagrant
        #aws.access_key_id = "XXXXXXXXXXXXXXXXXX"
        #aws.secret_access_key = "XXXXXXXXXXXXXXXXXX"
        # Cambiar tipo de instancia, por defecto coge una m3.medium (no gratuita, depreciada)
        aws.instance_type = "t2.micro"
        aws.ami = "ami-006a0174c6c25ac06"
        # Cambiar región, por defecto coge us-east-1
        aws.region = "eu-west-2"
        # Grupo de seguridad que acepte conexiones SSH puerto 22
        aws.security_groups = ['vagrant']
        # Etiquetas
        aws.tags = {
	        'Provider' => 'Vagrant'
        }
        # Sobreescribir usuario y ruta de clave privada
        override.ssh.username = "ubuntu"
        override.ssh.private_key_path = "./config/pgitic-key.pem"
    end

    #Aprovisionar instancia AWS
    #config.vm.provision "ansible" do |ansible|
    #  ansible.playbook = "provision.yml"
    #  ansible.host_key_checking = "false"
    #end 
end